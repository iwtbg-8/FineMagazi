import{AST_Binary,AST_Conditional,AST_Chain,AST_Dot,AST_Object,AST_Sequence,AST_Statement,AST_Sub,AST_UnaryPostfix,AST_PrefixedTemplateString}from"../ast.js";function first_in_statement(e){let n=e.parent(-1);for(let t,i=0;t=e.parent(i);i++){if(t instanceof AST_Statement&&t.body===n)return!0;if(!(t instanceof AST_Sequence&&t.expressions[0]===n||"Call"===t.TYPE&&t.expression===n||t instanceof AST_PrefixedTemplateString&&t.prefix===n||t instanceof AST_Dot&&t.expression===n||t instanceof AST_Sub&&t.expression===n||t instanceof AST_Chain&&t.expression===n||t instanceof AST_Conditional&&t.condition===n||t instanceof AST_Binary&&t.left===n||t instanceof AST_UnaryPostfix&&t.expression===n))return!1;n=t}}function left_is_object(e){return e instanceof AST_Object||(e instanceof AST_Sequence?left_is_object(e.expressions[0]):"Call"===e.TYPE?left_is_object(e.expression):e instanceof AST_PrefixedTemplateString?left_is_object(e.prefix):e instanceof AST_Dot||e instanceof AST_Sub||e instanceof AST_Chain?left_is_object(e.expression):e instanceof AST_Conditional?left_is_object(e.condition):e instanceof AST_Binary?left_is_object(e.left):e instanceof AST_UnaryPostfix&&left_is_object(e.expression))}export{first_in_statement,left_is_object};