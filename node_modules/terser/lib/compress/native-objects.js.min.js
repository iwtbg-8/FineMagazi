import{makePredicate}from"../utils/index.js";function make_nested_lookup(e){const t=new Map;for(var o of Object.keys(e))t.set(o,makePredicate(e[o]));return(e,o)=>{const r=t.get(e);return null!=r&&r.has(o)}}export const pure_prop_access_globals=new Set(["Number","String","Array","Object","Function","Promise"]);const object_methods=["constructor","toString","valueOf"];export const is_pure_native_method=make_nested_lookup({Array:["at","flat","includes","indexOf","join","lastIndexOf","slice",...object_methods],Boolean:object_methods,Function:object_methods,Number:["toExponential","toFixed","toPrecision",...object_methods],Object:object_methods,RegExp:["test",...object_methods],String:["at","charAt","charCodeAt","charPointAt","concat","endsWith","fromCharCode","fromCodePoint","includes","indexOf","italics","lastIndexOf","localeCompare","match","matchAll","normalize","padStart","padEnd","repeat","replace","replaceAll","search","slice","split","startsWith","substr","substring","repeat","toLocaleLowerCase","toLocaleUpperCase","toLowerCase","toUpperCase","trim","trimEnd","trimStart",...object_methods]});export const is_pure_native_fn=make_nested_lookup({Array:["isArray"],Math:["abs","acos","asin","atan","ceil","cos","exp","floor","log","round","sin","sqrt","tan","atan2","pow","max","min"],Number:["isFinite","isNaN"],Object:["create","getOwnPropertyDescriptor","getOwnPropertyNames","getPrototypeOf","isExtensible","isFrozen","isSealed","hasOwn","keys"],String:["fromCharCode"]});export const is_pure_native_value=make_nested_lookup({Math:["E","LN10","LN2","LOG2E","LOG10E","PI","SQRT1_2","SQRT2"],Number:["MAX_VALUE","MIN_VALUE","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY"]});