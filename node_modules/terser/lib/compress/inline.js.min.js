import{AST_Array,AST_Assign,AST_Block,AST_Call,AST_Catch,AST_Class,AST_ClassExpression,AST_DefaultAssign,AST_DefClass,AST_Defun,AST_Destructuring,AST_EmptyStatement,AST_Expansion,AST_Export,AST_Function,AST_IterationStatement,AST_Lambda,AST_Node,AST_Number,AST_Object,AST_ObjectKeyVal,AST_PropAccess,AST_Return,AST_Scope,AST_SimpleStatement,AST_Statement,AST_SymbolDefun,AST_SymbolFunarg,AST_SymbolLambda,AST_SymbolRef,AST_SymbolVar,AST_This,AST_Toplevel,AST_UnaryPrefix,AST_Undefined,AST_Var,AST_VarDef,walk,_INLINE,_NOINLINE,_PURE}from"../ast.js";import{make_node,has_annotation}from"../utils/index.js";import"../size.js";import"./evaluate.js";import"./drop-side-effect-free.js";import"./reduce-vars.js";import{SQUEEZED,INLINED,UNUSED,has_flag,set_flag}from"./compressor-flags.js";import{make_sequence,best_of,make_node_from_constant,identifier_atom,is_empty,is_func_expr,is_iife_call,is_reachable,is_recursive_ref,retain_top_func}from"./common.js";function within_array_or_object_literal(e){for(var n,a=0;n=e.parent(a++);){if(n instanceof AST_Statement)return!1;if(n instanceof AST_Array||n instanceof AST_ObjectKeyVal||n instanceof AST_Object)return!0}return!1}function scope_encloses_variables_in_this_scope(e,n){for(const a of n.enclosed){if(n.variables.has(a.name))continue;const i=e.find_variable(a.name);if(i){if(i===a)continue;return!0}}return!1}function is_const_symbol_short_than_init_value(e,n){if(1===e.orig.length&&n){return n.size()>e.name.length}return!0}export function inline_into_symbolref(e,n){if(n.in_computed_key())return e;const a=n.parent(),i=e.definition(),o=n.find_scope();let t=e.fixed_value();if(n.top_retain&&i.global&&n.top_retain(i)&&is_const_symbol_short_than_init_value(i,t))return i.fixed=!1,i.single_use=!1,e;if(dont_inline_lambda_in_loop(n,t))return e;let s=i.single_use&&!(a instanceof AST_Call&&a.is_callee_pure(n)||has_annotation(a,_NOINLINE))&&!(a instanceof AST_Export&&t instanceof AST_Lambda&&t.name);if(s&&t instanceof AST_Node&&(s=!t.has_side_effects(n)&&!t.may_throw(n)),t instanceof AST_Class&&i.scope!==e.scope)return e;if(s&&(t instanceof AST_Lambda||t instanceof AST_Class))if(retain_top_func(t,n))s=!1;else if(i.scope===e.scope||1!=i.escaped&&!has_flag(t,INLINED)&&!within_array_or_object_literal(n)&&n.option("reduce_funcs")){if(is_recursive_ref(n,i))s=!1;else if((i.scope!==e.scope||i.orig[0]instanceof AST_SymbolFunarg)&&(s=t.is_constant_expression(e.scope),"f"==s)){var r=e.scope;do{(r instanceof AST_Defun||is_func_expr(r))&&set_flag(r,INLINED)}while(r=r.parent_scope)}}else s=!1;if(s&&(t instanceof AST_Lambda||t instanceof AST_Class)&&(s=i.scope===e.scope&&!scope_encloses_variables_in_this_scope(o,t)||a instanceof AST_Call&&a.expression===e&&!scope_encloses_variables_in_this_scope(o,t)&&!(t.name&&t.name.definition().recursive_refs>0)),s&&t){if(t instanceof AST_DefClass&&(set_flag(t,SQUEEZED),t=make_node(AST_ClassExpression,t,t)),t instanceof AST_Defun&&(set_flag(t,SQUEEZED),t=make_node(AST_Function,t,t)),i.recursive_refs>0&&t.name instanceof AST_SymbolDefun){const e=t.name.definition();let n=t.variables.get(t.name.name),a=n&&n.orig[0];a instanceof AST_SymbolLambda||(a=make_node(AST_SymbolLambda,t.name,t.name),a.scope=t,t.name=a,n=t.def_function(a)),walk(t,a=>{a instanceof AST_SymbolRef&&a.definition()===e&&(a.thedef=n,n.references.push(a))})}return(t instanceof AST_Lambda||t instanceof AST_Class)&&t.parent_scope!==o&&(t=t.clone(!0,n.get_toplevel()),o.add_child_scope(t)),t.optimize(n)}if(t){let a;if(t instanceof AST_This)i.orig[0]instanceof AST_SymbolFunarg||!i.references.every(e=>i.scope===e.scope)||(a=t);else{var _=t.evaluate(n);_===t||!n.option("unsafe_regexp")&&_ instanceof RegExp||(a=make_node_from_constant(_,t))}if(a){const o=e.size(n),s=a.size(n);let r=0;if(n.option("unused")&&!n.exposed(i)&&(r=(o+2+t.size(n))/(i.references.length-i.assignments)),s<=o+r)return a}}return e}export function inline_into_call(e,n){if(n.in_computed_key())return e;var a=e.expression,i=a,o=e.args.every(e=>!(e instanceof AST_Expansion));if(n.option("reduce_vars")&&i instanceof AST_SymbolRef&&!has_annotation(e,_NOINLINE)){const o=i.fixed_value();if(retain_top_func(o,n)||!n.toplevel.funcs&&a.definition().global)return e;i=o}if(dont_inline_lambda_in_loop(n,i)&&!has_annotation(e,_INLINE))return e;var t=i instanceof AST_Lambda,s=t&&i.body[0],r=t&&!i.is_generator&&!i.async,_=r&&n.option("inline")&&!e.is_callee_pure(n);if(_&&s instanceof AST_Return){let a=s.value;if(!a||a.is_constant_expression()){a=a?a.clone(!0):make_node(AST_Undefined,e);const i=e.args.concat(a);return make_sequence(e,i).optimize(n)}if(1===i.argnames.length&&i.argnames[0]instanceof AST_SymbolFunarg&&e.args.length<2&&!(e.args[0]instanceof AST_Expansion)&&a instanceof AST_SymbolRef&&a.name===i.argnames[0].name){const a=(e.args[0]||make_node(AST_Undefined)).optimize(n);let i;return a instanceof AST_PropAccess&&(i=n.parent())instanceof AST_Call&&i.expression===e?make_sequence(e,[make_node(AST_Number,e,{value:0}),a]):a}}if(_){var f,c,l=-1;let t,r,_;if(o&&!i.uses_arguments&&!(n.parent()instanceof AST_Class)&&!(i.name&&i instanceof AST_Function)&&(r=function(e){var a=i.body,o=a.length;if(n.option("inline")<3)return 1==o&&u(e);e=null;for(var t=0;t<o;t++){var s=a[t];if(s instanceof AST_Var){if(e&&!s.definitions.every(e=>!e.value))return!1}else{if(e)return!1;s instanceof AST_EmptyStatement||(e=s)}}return u(e)}(s))&&(a===i||has_annotation(e,_INLINE)||n.option("unused")&&1==(t=a.definition()).references.length&&!is_recursive_ref(n,t)&&i.is_constant_expression(a.scope))&&!has_annotation(e,_PURE|_NOINLINE)&&!i.contains_this()&&function(){var e=new Set;do{if((f=n.parent(++l)).is_block_scope()&&f.block_scope&&f.block_scope.variables.forEach(function(n){e.add(n.name)}),f instanceof AST_Catch)f.argname&&e.add(f.argname.name);else if(f instanceof AST_IterationStatement)c=[];else if(f instanceof AST_SymbolRef&&f.fixed_value()instanceof AST_Scope)return!1}while(!(f instanceof AST_Scope));var a=!(f instanceof AST_Toplevel)||n.toplevel.vars,o=n.option("inline");return!!function(e,n){for(var a=i.body.length,o=0;o<a;o++){var t=i.body[o];if(t instanceof AST_Var){if(!n)return!1;for(var s=t.definitions.length;--s>=0;){var r=t.definitions[s].name;if(r instanceof AST_Destructuring||e.has(r.name)||identifier_atom.has(r.name)||f.conflicting_def(r.name))return!1;c&&c.push(r.definition())}}}return!0}(e,o>=3&&a)&&(!!function(e,n){for(var a=0,o=i.argnames.length;a<o;a++){var t=i.argnames[a];if(t instanceof AST_DefaultAssign){if(has_flag(t.left,UNUSED))continue;return!1}if(t instanceof AST_Destructuring)return!1;if(t instanceof AST_Expansion){if(has_flag(t.expression,UNUSED))continue;return!1}if(!has_flag(t,UNUSED)){if(!n||e.has(t.name)||identifier_atom.has(t.name)||f.conflicting_def(t.name))return!1;c&&c.push(t.definition())}}return!0}(e,o>=2&&a)&&(!c||0==c.length||!is_reachable(i,c)))}()&&(_=n.find_scope())&&!scope_encloses_variables_in_this_scope(_,i)&&!function(){let e,a=0;for(;e=n.parent(a++);){if(e instanceof AST_DefaultAssign)return!0;if(e instanceof AST_Block)break}return!1}()&&!(f instanceof AST_Class))return set_flag(i,SQUEEZED),_.add_child_scope(i),make_sequence(e,function(a){var o=[],t=[];if(function(n,a){for(var o=i.argnames.length,t=e.args.length;--t>=o;)a.push(e.args[t]);for(t=o;--t>=0;){var s=i.argnames[t],r=e.args[t];if(has_flag(s,UNUSED)||!s.name||f.conflicting_def(s.name))r&&a.push(r);else{var _=make_node(AST_SymbolVar,s,s);s.definition().orig.push(_),!r&&c&&(r=make_node(AST_Undefined,e)),p(n,a,_,r)}}n.reverse(),a.reverse()}(o,t),function(e,n){for(var a=n.length,o=0,t=i.body.length;o<t;o++){var s=i.body[o];if(s instanceof AST_Var)for(var r=0,_=s.definitions.length;r<_;r++){var f=s.definitions[r],l=f.name;if(p(e,n,l,f.value),c&&i.argnames.every(e=>e.name!=l.name)){var S=i.variables.get(l.name),m=make_node(AST_SymbolRef,l,l);S.references.push(m),n.splice(a++,0,make_node(AST_Assign,f,{operator:"=",logical:!1,left:m,right:make_node(AST_Undefined,l)}))}}}}(o,t),t.push(a),o.length){const e=f.body.indexOf(n.parent(l-1))+1;f.body.splice(e,0,make_node(AST_Var,i,{definitions:o}))}return t.map(e=>e.clone(!0))}(r)).optimize(n)}if(_&&has_annotation(e,_INLINE))return set_flag(i,SQUEEZED),(i=(i=make_node(i.CTOR===AST_Defun?AST_Function:i.CTOR,i,i)).clone(!0)).figure_out_scope({},{parent_scope:n.find_scope(),toplevel:n.get_toplevel()}),make_node(AST_Call,e,{expression:i,args:e.args}).optimize(n);if(r&&n.option("side_effects")&&i.body.every(is_empty)){var S=e.args.concat(make_node(AST_Undefined,e));return make_sequence(e,S).optimize(n)}if(n.option("negate_iife")&&n.parent()instanceof AST_SimpleStatement&&is_iife_call(e))return e.negate(n,!0);var m=e.evaluate(n);return m!==e?(m=make_node_from_constant(m,e).optimize(n),best_of(n,m,e)):e;function u(n){return n?n instanceof AST_Return?n.value?n.value.clone(!0):make_node(AST_Undefined,e):n instanceof AST_SimpleStatement?make_node(AST_UnaryPrefix,n,{operator:"void",expression:n.body.clone(!0)}):void 0:make_node(AST_Undefined,e)}function p(n,a,i,o){var t=i.definition();f.variables.has(i.name)||(f.variables.set(i.name,t),f.enclosed.push(t),n.push(make_node(AST_VarDef,i,{name:i,value:null})));var s=make_node(AST_SymbolRef,i,i);t.references.push(s),o&&a.push(make_node(AST_Assign,e,{operator:"=",logical:!1,left:s,right:o.clone()}))}}function dont_inline_lambda_in_loop(e,n){return(n instanceof AST_Lambda||n instanceof AST_Class)&&!!e.is_within_loop()}