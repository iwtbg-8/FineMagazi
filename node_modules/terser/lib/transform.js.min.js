"use strict";import{AST_Array,AST_Await,AST_Binary,AST_PrivateIn,AST_Block,AST_Call,AST_Case,AST_Catch,AST_Chain,AST_Class,AST_ClassStaticBlock,AST_Conditional,AST_DefinitionsLike,AST_Destructuring,AST_Do,AST_Exit,AST_Expansion,AST_Export,AST_For,AST_ForIn,AST_If,AST_Import,AST_LabeledStatement,AST_Lambda,AST_LoopControl,AST_NameMapping,AST_Node,AST_Number,AST_Object,AST_ObjectProperty,AST_PrefixedTemplateString,AST_PropAccess,AST_Sequence,AST_SimpleStatement,AST_Sub,AST_Switch,AST_TemplateString,AST_Try,AST_Unary,AST_VarDefLike,AST_While,AST_With,AST_Yield}from"./ast.js";import{MAP as do_list,noop}from"./utils/index.js";function def_transform(n,o){n.DEFMETHOD("transform",function(n,r){let t;if(n.push(this),n.before&&(t=n.before(this,o,r)),void 0===t&&(t=this,o(t,n),n.after)){const o=n.after(t,r);void 0!==o&&(t=o)}return n.pop(),t})}def_transform(AST_Node,noop),def_transform(AST_LabeledStatement,function(n,o){n.label=n.label.transform(o),n.body=n.body.transform(o)}),def_transform(AST_SimpleStatement,function(n,o){n.body=n.body.transform(o)}),def_transform(AST_Block,function(n,o){n.body=do_list(n.body,o)}),def_transform(AST_Do,function(n,o){n.body=n.body.transform(o),n.condition=n.condition.transform(o)}),def_transform(AST_While,function(n,o){n.condition=n.condition.transform(o),n.body=n.body.transform(o)}),def_transform(AST_For,function(n,o){n.init&&(n.init=n.init.transform(o)),n.condition&&(n.condition=n.condition.transform(o)),n.step&&(n.step=n.step.transform(o)),n.body=n.body.transform(o)}),def_transform(AST_ForIn,function(n,o){n.init=n.init.transform(o),n.object=n.object.transform(o),n.body=n.body.transform(o)}),def_transform(AST_With,function(n,o){n.expression=n.expression.transform(o),n.body=n.body.transform(o)}),def_transform(AST_Exit,function(n,o){n.value&&(n.value=n.value.transform(o))}),def_transform(AST_LoopControl,function(n,o){n.label&&(n.label=n.label.transform(o))}),def_transform(AST_If,function(n,o){n.condition=n.condition.transform(o),n.body=n.body.transform(o),n.alternative&&(n.alternative=n.alternative.transform(o))}),def_transform(AST_Switch,function(n,o){n.expression=n.expression.transform(o),n.body=do_list(n.body,o)}),def_transform(AST_Case,function(n,o){n.expression=n.expression.transform(o),n.body=do_list(n.body,o)}),def_transform(AST_Try,function(n,o){n.body=n.body.transform(o),n.bcatch&&(n.bcatch=n.bcatch.transform(o)),n.bfinally&&(n.bfinally=n.bfinally.transform(o))}),def_transform(AST_Catch,function(n,o){n.argname&&(n.argname=n.argname.transform(o)),n.body=do_list(n.body,o)}),def_transform(AST_DefinitionsLike,function(n,o){n.definitions=do_list(n.definitions,o)}),def_transform(AST_VarDefLike,function(n,o){n.name=n.name.transform(o),n.value&&(n.value=n.value.transform(o))}),def_transform(AST_Destructuring,function(n,o){n.names=do_list(n.names,o)}),def_transform(AST_Lambda,function(n,o){n.name&&(n.name=n.name.transform(o)),n.argnames=do_list(n.argnames,o,!1),n.body instanceof AST_Node?n.body=n.body.transform(o):n.body=do_list(n.body,o)}),def_transform(AST_Call,function(n,o){n.expression=n.expression.transform(o),n.args=do_list(n.args,o,!1)}),def_transform(AST_Sequence,function(n,o){const r=do_list(n.expressions,o);n.expressions=r.length?r:[new AST_Number({value:0})]}),def_transform(AST_PropAccess,function(n,o){n.expression=n.expression.transform(o)}),def_transform(AST_Sub,function(n,o){n.expression=n.expression.transform(o),n.property=n.property.transform(o)}),def_transform(AST_Chain,function(n,o){n.expression=n.expression.transform(o)}),def_transform(AST_Yield,function(n,o){n.expression&&(n.expression=n.expression.transform(o))}),def_transform(AST_Await,function(n,o){n.expression=n.expression.transform(o)}),def_transform(AST_Unary,function(n,o){n.expression=n.expression.transform(o)}),def_transform(AST_Binary,function(n,o){n.left=n.left.transform(o),n.right=n.right.transform(o)}),def_transform(AST_PrivateIn,function(n,o){n.key=n.key.transform(o),n.value=n.value.transform(o)}),def_transform(AST_Conditional,function(n,o){n.condition=n.condition.transform(o),n.consequent=n.consequent.transform(o),n.alternative=n.alternative.transform(o)}),def_transform(AST_Array,function(n,o){n.elements=do_list(n.elements,o)}),def_transform(AST_Object,function(n,o){n.properties=do_list(n.properties,o)}),def_transform(AST_ObjectProperty,function(n,o){n.key instanceof AST_Node&&(n.key=n.key.transform(o)),n.value&&(n.value=n.value.transform(o))}),def_transform(AST_Class,function(n,o){n.name&&(n.name=n.name.transform(o)),n.extends&&(n.extends=n.extends.transform(o)),n.properties=do_list(n.properties,o)}),def_transform(AST_ClassStaticBlock,function(n,o){n.body=do_list(n.body,o)}),def_transform(AST_Expansion,function(n,o){n.expression=n.expression.transform(o)}),def_transform(AST_NameMapping,function(n,o){n.foreign_name=n.foreign_name.transform(o),n.name=n.name.transform(o)}),def_transform(AST_Import,function(n,o){n.imported_name&&(n.imported_name=n.imported_name.transform(o)),n.imported_names&&do_list(n.imported_names,o),n.module_name=n.module_name.transform(o)}),def_transform(AST_Export,function(n,o){n.exported_definition&&(n.exported_definition=n.exported_definition.transform(o)),n.exported_value&&(n.exported_value=n.exported_value.transform(o)),n.exported_names&&do_list(n.exported_names,o),n.module_name&&(n.module_name=n.module_name.transform(o))}),def_transform(AST_TemplateString,function(n,o){n.segments=do_list(n.segments,o)}),def_transform(AST_PrefixedTemplateString,function(n,o){n.prefix=n.prefix.transform(o),n.template_string=n.template_string.transform(o)});