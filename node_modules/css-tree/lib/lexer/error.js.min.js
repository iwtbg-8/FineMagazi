import{createCustomError}from"../utils/create-custom-error.js";import{generate}from"../definition-syntax/generate.js";const defaultLoc={offset:0,line:1,column:1};function locateMismatch(t,e){const n=t.tokens,o=t.longestMatch,r=o<n.length&&n[o].node||null,c=r!==e?r:null;let s,l,a=0,i=0,u=0,f="";for(let t=0;t<n.length;t++){const e=n[t].value;t===o&&(i=e.length,a=f.length),null!==c&&n[t].node===c&&(t<=o?u++:u=0),f+=e}return o===n.length||u>1?(s=fromLoc(c||e,"end")||buildLoc(defaultLoc,f),l=buildLoc(s)):(s=fromLoc(c,"start")||buildLoc(fromLoc(e,"start")||defaultLoc,f.slice(0,a)),l=fromLoc(c,"end")||buildLoc(s,f.substr(a,i))),{css:f,mismatchOffset:a,mismatchLength:i,start:s,end:l}}function fromLoc(t,e){const n=t&&t.loc&&t.loc[e];return n?"line"in n?buildLoc(n):n:null}function buildLoc({offset:t,line:e,column:n},o){const r={offset:t,line:e,column:n};if(o){const t=o.split(/\n|\r\n?|\f/);r.offset+=o.length,r.line+=t.length-1,r.column=1===t.length?r.column+o.length:t.pop().length+1}return r}export const SyntaxReferenceError=function(t,e){const n=createCustomError("SyntaxReferenceError",t+(e?" `"+e+"`":""));return n.reference=e,n};export const SyntaxMatchError=function(t,e,n,o){const r=createCustomError("SyntaxMatchError",t),{css:c,mismatchOffset:s,mismatchLength:l,start:a,end:i}=locateMismatch(o,n);return r.rawMessage=t,r.syntax=e?generate(e):"<generic>",r.css=c,r.mismatchOffset=s,r.mismatchLength=l,r.message=t+"\n  syntax: "+r.syntax+"\n   value: "+(c||"<empty string>")+"\n  --------"+new Array(r.mismatchOffset+1).join("-")+"^",Object.assign(r,a),r.loc={source:n&&n.loc&&n.loc.source||"<unknown>",start:a,end:i},r};