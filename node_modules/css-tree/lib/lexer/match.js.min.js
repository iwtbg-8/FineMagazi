import{MATCH,MISMATCH,DISALLOW_EMPTY}from"./match-graph.js";import*as TYPE from"../tokenizer/types.js";const{hasOwnProperty:hasOwnProperty}=Object.prototype,STUB=0,TOKEN=1,OPEN_SYNTAX=2,CLOSE_SYNTAX=3,EXIT_REASON_MATCH="Match",EXIT_REASON_MISMATCH="Mismatch",EXIT_REASON_ITERATION_LIMIT="Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)",ITERATION_LIMIT=15e3;export let totalIterationCount=0;function reverseList(e){let t=null,n=null,a=e;for(;null!==a;)n=a.prev,a.prev=t,t=a,a=n;return t}function areStringsEqualCaseInsensitive(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++){const a=t.charCodeAt(n);let r=e.charCodeAt(n);if(r>=65&&r<=90&&(r|=32),r!==a)return!1}return!0}function isContextEdgeDelim(e){return e.type===TYPE.Delim&&"?"!==e.value}function isCommaContextStart(e){return null===e||(e.type===TYPE.Comma||e.type===TYPE.Function||e.type===TYPE.LeftParenthesis||e.type===TYPE.LeftSquareBracket||e.type===TYPE.LeftCurlyBracket||isContextEdgeDelim(e))}function isCommaContextEnd(e){return null===e||(e.type===TYPE.RightParenthesis||e.type===TYPE.RightSquareBracket||e.type===TYPE.RightCurlyBracket||e.type===TYPE.Delim&&"/"===e.value)}function internalMatch(e,t,n){function a(){do{T++,M=T<e.length?e[T]:null}while(null!==M&&(M.type===TYPE.WhiteSpace||M.type===TYPE.Comment))}function r(t){const n=T+t;return n<e.length?e[n]:null}function l(e,t){return{nextState:e,matchStack:C,syntaxStack:h,thenStack:p,tokenIndex:T,prev:t}}function s(e){p={nextState:e,matchStack:C,syntaxStack:h,prev:p}}function c(e){m=l(e,m)}function o(){C={type:1,syntax:t.syntax,token:M,prev:C},a(),y=null,T>x&&(x=T)}function u(){h={syntax:t.syntax,opts:t.syntax.opts||null!==h&&h.opts||null,prev:h},C={type:2,syntax:t.syntax,token:C.token,prev:C}}function i(){C=2===C.type?C.prev:{type:3,syntax:h.syntax,token:C.token,prev:C},h=h.prev}let h=null,p=null,m=null,y=null,k=0,f=null,M=null,T=-1,x=0,C={type:0,syntax:null,token:null,prev:null};for(a();null===f&&++k<15e3;)switch(t.type){case"Match":if(null===p){if(null!==M&&(T!==e.length-1||"\\0"!==M.value&&"\\9"!==M.value)){t=MISMATCH;break}f="Match";break}if((t=p.nextState)===DISALLOW_EMPTY){if(p.matchStack===C){t=MISMATCH;break}t=MATCH}for(;p.syntaxStack!==h;)i();p=p.prev;break;case"Mismatch":if(null!==y&&!1!==y)(null===m||T>m.tokenIndex)&&(m=y,y=!1);else if(null===m){f="Mismatch";break}t=m.nextState,p=m.thenStack,h=m.syntaxStack,C=m.matchStack,T=m.tokenIndex,M=T<e.length?e[T]:null,m=m.prev;break;case"MatchGraph":t=t.match;break;case"If":t.else!==MISMATCH&&c(t.else),t.then!==MATCH&&s(t.then),t=t.match;break;case"MatchOnce":t={type:"MatchOnceBuffer",syntax:t,index:0,mask:0};break;case"MatchOnceBuffer":{const e=t.syntax.terms;if(t.index===e.length){if(0===t.mask||t.syntax.all){t=MISMATCH;break}t=MATCH;break}if(t.mask===(1<<e.length)-1){t=MATCH;break}for(;t.index<e.length;t.index++){const n=1<<t.index;if(0===(t.mask&n)){c(t),s({type:"AddMatchOnce",syntax:t.syntax,mask:t.mask|n}),t=e[t.index++];break}}break}case"AddMatchOnce":t={type:"MatchOnceBuffer",syntax:t.syntax,index:0,mask:t.mask};break;case"Enum":if(null!==M){let e=M.value.toLowerCase();if(-1!==e.indexOf("\\")&&(e=e.replace(/\\[09].*$/,"")),hasOwnProperty.call(t.map,e)){t=t.map[e];break}}t=MISMATCH;break;case"Generic":{const e=null!==h?h.opts:null,n=T+Math.floor(t.fn(M,r,e));if(!isNaN(n)&&n>T){for(;T<n;)o();t=MATCH}else t=MISMATCH;break}case"Type":case"Property":{const e="Type"===t.type?"types":"properties",a=hasOwnProperty.call(n,e)?n[e][t.name]:null;if(!a||!a.match)throw new Error("Bad syntax reference: "+("Type"===t.type?"<"+t.name+">":"<'"+t.name+"'>"));if(!1!==y&&null!==M&&"Type"===t.type){if("custom-ident"===t.name&&M.type===TYPE.Ident||"length"===t.name&&"0"===M.value){null===y&&(y=l(t,m)),t=MISMATCH;break}}u(),t=a.match;break}case"Keyword":{const e=t.name;if(null!==M){let n=M.value;if(-1!==n.indexOf("\\")&&(n=n.replace(/\\[09].*$/,"")),areStringsEqualCaseInsensitive(n,e)){o(),t=MATCH;break}}t=MISMATCH;break}case"AtKeyword":case"Function":if(null!==M&&areStringsEqualCaseInsensitive(M.value,t.name)){o(),t=MATCH;break}t=MISMATCH;break;case"Token":if(null!==M&&M.value===t.value){o(),t=MATCH;break}t=MISMATCH;break;case"Comma":null!==M&&M.type===TYPE.Comma?isCommaContextStart(C.token)?t=MISMATCH:(o(),t=isCommaContextEnd(M)?MISMATCH:MATCH):t=isCommaContextStart(C.token)||isCommaContextEnd(M)?MATCH:MISMATCH;break;case"String":let a="",k=T;for(;k<e.length&&a.length<t.value.length;k++)a+=e[k].value;if(areStringsEqualCaseInsensitive(a,t.value)){for(;T<k;)o();t=MATCH}else t=MISMATCH;break;default:throw new Error("Unknown node type: "+t.type)}switch(totalIterationCount+=k,f){case null:console.warn("[csstree-match] BREAK after 15000 iterations"),f=EXIT_REASON_ITERATION_LIMIT,C=null;break;case"Match":for(;null!==h;)i();break;default:C=null}return{tokens:e,reason:f,iterations:k,match:C,longestMatch:x}}export function matchAsList(e,t,n){const a=internalMatch(e,t,n||{});if(null!==a.match){let e=reverseList(a.match).prev;for(a.match=[];null!==e;){switch(e.type){case 2:case 3:a.match.push({type:e.type,syntax:e.syntax});break;default:a.match.push({token:e.token.value,node:e.token.node})}e=e.prev}}return a}export function matchAsTree(e,t,n){const a=internalMatch(e,t,n||{});if(null===a.match)return a;let r=a.match,l=a.match={syntax:t.syntax||null,match:[]};const s=[l];for(r=reverseList(r).prev;null!==r;){switch(r.type){case 2:l.match.push(l={syntax:r.syntax,match:[]}),s.push(l);break;case 3:s.pop(),l=s[s.length-1];break;default:l.match.push({syntax:r.syntax||null,token:r.token.value,node:r.token.node})}r=r.prev}return a}