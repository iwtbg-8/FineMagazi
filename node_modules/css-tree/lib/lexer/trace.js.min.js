export function getTrace(t){function e(t){return null!==t&&("Type"===t.type||"Property"===t.type||"Keyword"===t.type)}let r=null;return null!==this.matched&&function n(o){if(Array.isArray(o.match)){for(let t=0;t<o.match.length;t++)if(n(o.match[t]))return e(o.syntax)&&r.unshift(o.syntax),!0}else if(o.node===t)return r=e(o.syntax)?[o.syntax]:[],!0;return!1}(this.matched),r}export function isType(t,e){return testNode(this,t,t=>"Type"===t.type&&t.name===e)}export function isProperty(t,e){return testNode(this,t,t=>"Property"===t.type&&t.name===e)}export function isKeyword(t){return testNode(this,t,t=>"Keyword"===t.type)}function testNode(t,e,r){const n=getTrace.call(t,e);return null!==n&&n.some(r)}