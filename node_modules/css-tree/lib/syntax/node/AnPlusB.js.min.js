import{isDigit,WhiteSpace,Comment,Ident,Number,Dimension}from"../../tokenizer/index.js";const PLUSSIGN=43,HYPHENMINUS=45,N=110,DISALLOW_SIGN=!0,ALLOW_SIGN=!1;function checkInteger(t,e){let s=this.tokenStart+t;const i=this.charCodeAt(s);for(43!==i&&45!==i||(e&&this.error("Number sign is not allowed"),s++);s<this.tokenEnd;s++)isDigit(this.charCodeAt(s))||this.error("Integer is expected",s)}function checkTokenIsInteger(t){return checkInteger.call(this,0,t)}function expectCharCode(t,e){if(!this.cmpChar(this.tokenStart+t,e)){let s="";switch(e){case N:s="N is expected";break;case 45:s="HyphenMinus is expected"}this.error(s,this.tokenStart+t)}}function consumeB(){let t=0,e=0,s=this.tokenType;for(;s===WhiteSpace||s===Comment;)s=this.lookupType(++t);if(s!==Number){if(!this.isDelim(43,t)&&!this.isDelim(45,t))return null;e=this.isDelim(43,t)?43:45;do{s=this.lookupType(++t)}while(s===WhiteSpace||s===Comment);s!==Number&&(this.skip(t),checkTokenIsInteger.call(this,true))}return t>0&&this.skip(t),0===e&&(s=this.charCodeAt(this.tokenStart),43!==s&&45!==s&&this.error("Number sign is expected")),checkTokenIsInteger.call(this,0!==e),45===e?"-"+this.consume(Number):this.consume(Number)}export const name="AnPlusB";export const structure={a:[String,null],b:[String,null]};export function parse(){const t=this.tokenStart;let e=null,s=null;if(this.tokenType===Number)checkTokenIsInteger.call(this,false),s=this.consume(Number);else if(this.tokenType===Ident&&this.cmpChar(this.tokenStart,45))switch(e="-1",expectCharCode.call(this,1,N),this.tokenEnd-this.tokenStart){case 2:this.next(),s=consumeB.call(this);break;case 3:expectCharCode.call(this,2,45),this.next(),this.skipSC(),checkTokenIsInteger.call(this,true),s="-"+this.consume(Number);break;default:expectCharCode.call(this,2,45),checkInteger.call(this,3,true),this.next(),s=this.substrToCursor(t+2)}else if(this.tokenType===Ident||this.isDelim(43)&&this.lookupType(1)===Ident){let i=0;switch(e="1",this.isDelim(43)&&(i=1,this.next()),expectCharCode.call(this,0,N),this.tokenEnd-this.tokenStart){case 1:this.next(),s=consumeB.call(this);break;case 2:expectCharCode.call(this,1,45),this.next(),this.skipSC(),checkTokenIsInteger.call(this,true),s="-"+this.consume(Number);break;default:expectCharCode.call(this,1,45),checkInteger.call(this,2,true),this.next(),s=this.substrToCursor(t+i+1)}}else if(this.tokenType===Dimension){const i=this.charCodeAt(this.tokenStart),n=43===i||45===i;let h=this.tokenStart+n;for(;h<this.tokenEnd&&isDigit(this.charCodeAt(h));h++);h===this.tokenStart+n&&this.error("Integer is expected",this.tokenStart+n),expectCharCode.call(this,h-this.tokenStart,N),e=this.substring(t,h),h+1===this.tokenEnd?(this.next(),s=consumeB.call(this)):(expectCharCode.call(this,h-this.tokenStart+1,45),h+2===this.tokenEnd?(this.next(),this.skipSC(),checkTokenIsInteger.call(this,true),s="-"+this.consume(Number)):(checkInteger.call(this,h-this.tokenStart+2,true),this.next(),s=this.substrToCursor(h+1)))}else this.error();return null!==e&&43===e.charCodeAt(0)&&(e=e.substr(1)),null!==s&&43===s.charCodeAt(0)&&(s=s.substr(1)),{type:"AnPlusB",loc:this.getLocation(t,this.tokenStart),a:e,b:s}}export function generate(t){if(t.a){const e=("+1"===t.a||"1"===t.a?"n":"-1"===t.a&&"-n")||t.a+"n";if(t.b){const s="-"===t.b[0]||"+"===t.b[0]?t.b:"+"+t.b;this.tokenize(e+s)}else this.tokenize(e)}else this.tokenize(t.b)}