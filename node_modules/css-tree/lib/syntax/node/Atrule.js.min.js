import{AtKeyword,Semicolon,LeftCurlyBracket,RightCurlyBracket}from"../../tokenizer/index.js";function consumeRaw(t){return this.Raw(t,this.consumeUntilLeftCurlyBracketOrSemicolon,!0)}function isDeclarationBlockAtrule(){for(let t,e=1;t=this.lookupType(e);e++){if(t===RightCurlyBracket)return!0;if(t===LeftCurlyBracket||t===AtKeyword)return!1}return!1}export const name="Atrule";export const walkContext="atrule";export const structure={name:String,prelude:["AtrulePrelude","Raw",null],block:["Block",null]};export function parse(){const t=this.tokenStart;let e,r,o=null,l=null;switch(this.eat(AtKeyword),e=this.substrToCursor(t+1),r=e.toLowerCase(),this.skipSC(),!1===this.eof&&this.tokenType!==LeftCurlyBracket&&this.tokenType!==Semicolon&&(o=this.parseAtrulePrelude?this.parseWithFallback(this.AtrulePrelude.bind(this,e),consumeRaw):consumeRaw.call(this,this.tokenIndex),this.skipSC()),this.tokenType){case Semicolon:this.next();break;case LeftCurlyBracket:l=hasOwnProperty.call(this.atrule,r)&&"function"==typeof this.atrule[r].block?this.atrule[r].block.call(this):this.Block(isDeclarationBlockAtrule.call(this))}return{type:"Atrule",loc:this.getLocation(t,this.tokenStart),name:e,prelude:o,block:l}}export function generate(t){this.token(AtKeyword,"@"+t.name),null!==t.prelude&&this.node(t.prelude),t.block?this.node(t.block):this.token(Semicolon,";")}