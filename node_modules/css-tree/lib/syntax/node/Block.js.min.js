import{WhiteSpace,Comment,Semicolon,AtKeyword,LeftCurlyBracket,RightCurlyBracket}from"../../tokenizer/index.js";function consumeRaw(t){return this.Raw(t,null,!0)}function consumeRule(){return this.parseWithFallback(this.Rule,consumeRaw)}function consumeRawDeclaration(t){return this.Raw(t,this.consumeUntilSemicolonIncluded,!0)}function consumeDeclaration(){if(this.tokenType===Semicolon)return consumeRawDeclaration.call(this,this.tokenIndex);const t=this.parseWithFallback(this.Declaration,consumeRawDeclaration);return this.tokenType===Semicolon&&this.next(),t}export const name="Block";export const walkContext="block";export const structure={children:[["Atrule","Rule","Declaration"]]};export function parse(t){const e=t?consumeDeclaration:consumeRule,n=this.tokenStart;let o=this.createList();this.eat(LeftCurlyBracket);t:for(;!this.eof;)switch(this.tokenType){case RightCurlyBracket:break t;case WhiteSpace:case Comment:this.next();break;case AtKeyword:o.push(this.parseWithFallback(this.Atrule,consumeRaw));break;default:o.push(e.call(this))}return this.eof||this.eat(RightCurlyBracket),{type:"Block",loc:this.getLocation(n,this.tokenStart),children:o}}export function generate(t){this.token(LeftCurlyBracket,"{"),this.children(t,t=>{"Declaration"===t.type&&this.token(Semicolon,";")}),this.token(RightCurlyBracket,"}")}