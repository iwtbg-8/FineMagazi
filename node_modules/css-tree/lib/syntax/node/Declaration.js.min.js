import{isCustomProperty}from"../../utils/names.js";import{Ident,Hash,Colon,Semicolon,Delim,WhiteSpace}from"../../tokenizer/index.js";const EXCLAMATIONMARK=33,NUMBERSIGN=35,DOLLARSIGN=36,AMPERSAND=38,ASTERISK=42,PLUSSIGN=43,SOLIDUS=47;function consumeValueRaw(t){return this.Raw(t,this.consumeUntilExclamationMarkOrSemicolon,!0)}function consumeCustomPropertyRaw(t){return this.Raw(t,this.consumeUntilExclamationMarkOrSemicolon,!1)}function consumeValue(){const t=this.tokenIndex,e=this.Value();return"Raw"!==e.type&&!1===this.eof&&this.tokenType!==Semicolon&&!1===this.isDelim(33)&&!1===this.isBalanceEdge(t)&&this.error(),e}export const name="Declaration";export const walkContext="declaration";export const structure={important:[Boolean,String],property:String,value:["Value","Raw"]};export function parse(){const t=this.tokenStart,e=this.tokenIndex,i=readProperty.call(this),o=isCustomProperty(i),s=o?this.parseCustomProperty:this.parseValue,n=o?consumeCustomPropertyRaw:consumeValueRaw;let a,r=!1;this.skipSC(),this.eat(Colon);const h=this.tokenIndex;if(o||this.skipSC(),a=s?this.parseWithFallback(consumeValue,n):n.call(this,this.tokenIndex),o&&"Value"===a.type&&a.children.isEmpty)for(let t=h-this.tokenIndex;t<=0;t++)if(this.lookupType(t)===WhiteSpace){a.children.appendData({type:"WhiteSpace",loc:null,value:" "});break}return this.isDelim(33)&&(r=getImportant.call(this),this.skipSC()),!1===this.eof&&this.tokenType!==Semicolon&&!1===this.isBalanceEdge(e)&&this.error(),{type:"Declaration",loc:this.getLocation(t,this.tokenStart),important:r,property:i,value:a}}export function generate(t){this.token(Ident,t.property),this.token(Colon,":"),this.node(t.value),t.important&&(this.token(Delim,"!"),this.token(Ident,!0===t.important?"important":t.important))}function readProperty(){const t=this.tokenStart;if(this.tokenType===Delim)switch(this.charCodeAt(this.tokenStart)){case 42:case 36:case 43:case 35:case 38:this.next();break;case 47:this.next(),this.isDelim(47)&&this.next()}return this.tokenType===Hash?this.eat(Hash):this.eat(Ident),this.substrToCursor(t)}function getImportant(){this.eat(Delim),this.skipSC();const t=this.consume(Ident);return"important"===t||t}