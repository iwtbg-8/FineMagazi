import{isHexDigit,Ident,Number,Dimension}from"../../tokenizer/index.js";const PLUSSIGN=43,HYPHENMINUS=45,QUESTIONMARK=63;function eatHexSequence(e,t){let i=0;for(let n=this.tokenStart+e;n<this.tokenEnd;n++){const s=this.charCodeAt(n);if(45===s&&t&&0!==i)return eatHexSequence.call(this,e+i+1,!1),-1;isHexDigit(s)||this.error(t&&0!==i?"Hyphen minus"+(i<6?" or hex digit":"")+" is expected":i<6?"Hex digit is expected":"Unexpected input",n),++i>6&&this.error("Too many hex digits",n)}return this.next(),i}function eatQuestionMarkSequence(e){let t=0;for(;this.isDelim(63);)++t>e&&this.error("Too many question marks"),this.next()}function startsWith(e){this.charCodeAt(this.tokenStart)!==e&&this.error((43===e?"Plus sign":"Hyphen minus")+" is expected")}function scanUnicodeRange(){let e=0;switch(this.tokenType){case Number:if(e=eatHexSequence.call(this,1,!0),this.isDelim(63)){eatQuestionMarkSequence.call(this,6-e);break}if(this.tokenType===Dimension||this.tokenType===Number){startsWith.call(this,45),eatHexSequence.call(this,1,!1);break}break;case Dimension:e=eatHexSequence.call(this,1,!0),e>0&&eatQuestionMarkSequence.call(this,6-e);break;default:if(this.eatDelim(43),this.tokenType===Ident){e=eatHexSequence.call(this,0,!0),e>0&&eatQuestionMarkSequence.call(this,6-e);break}if(this.isDelim(63)){this.next(),eatQuestionMarkSequence.call(this,5);break}this.error("Hex digit or question mark is expected")}}export const name="UnicodeRange";export const structure={value:String};export function parse(){const e=this.tokenStart;return this.eatIdent("u"),scanUnicodeRange.call(this),{type:"UnicodeRange",loc:this.getLocation(e,this.tokenStart),value:this.substrToCursor(e)}}export function generate(e){this.tokenize(e.value)}