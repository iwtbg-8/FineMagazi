import{adoptBuffer}from"./adopt-buffer.js";import{isBOM}from"./char-code-definitions.js";const N=10,F=12,R=13;function computeLinesAndColumns(t){const s=t.source,o=s.length,e=s.length>0?isBOM(s.charCodeAt(0)):0,n=adoptBuffer(t.lines,o),i=adoptBuffer(t.columns,o);let c=t.startLine,u=t.startColumn;for(let t=e;t<o;t++){const e=s.charCodeAt(t);n[t]=c,i[t]=u++,e!==N&&e!==R&&e!==F||(e===R&&t+1<o&&s.charCodeAt(t+1)===N&&(t++,n[t]=c,i[t]=u),c++,u=1)}n[o]=c,i[o]=u,t.lines=n,t.columns=i,t.computed=!0}export class OffsetToLocation{constructor(){this.lines=null,this.columns=null,this.computed=!1}setSource(t,s=0,o=1,e=1){this.source=t,this.startOffset=s,this.startLine=o,this.startColumn=e,this.computed=!1}getLocation(t,s){return this.computed||computeLinesAndColumns(this),{source:s,offset:this.startOffset+t,line:this.lines[t],column:this.columns[t]}}getLocationRange(t,s,o){return this.computed||computeLinesAndColumns(this),{source:o,start:{offset:this.startOffset+t,line:this.lines[t],column:this.columns[t]},end:{offset:this.startOffset+s,line:this.lines[s],column:this.columns[s]}}}}