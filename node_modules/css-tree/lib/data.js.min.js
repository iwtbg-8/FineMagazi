import{createRequire}from"module";import patch from"./data-patch.js";const require=createRequire(import.meta.url),mdnAtrules=require("mdn-data/css/at-rules.json"),mdnProperties=require("mdn-data/css/properties.json"),mdnSyntaxes=require("mdn-data/css/syntaxes.json"),extendSyntax=/^\s*\|\s*/;function preprocessAtrules(t){const e=Object.create(null);for(const r in t){const s=t[r];let n=null;if(s.descriptors){n=Object.create(null);for(const t in s.descriptors)n[t]=s.descriptors[t].syntax}e[r.substr(1)]={prelude:s.syntax.trim().replace(/\{(.|\s)+\}/,"").match(/^@\S+\s+([^;\{]*)/)[1].trim()||null,descriptors:n}}return e}function patchDictionary(t,e){const r={};for(const e in t)r[e]=t[e].syntax||t[e];for(const s in e)s in t?e[s].syntax?r[s]=extendSyntax.test(e[s].syntax)?r[s]+" "+e[s].syntax.trim():e[s].syntax:delete r[s]:e[s].syntax&&(r[s]=e[s].syntax.replace(extendSyntax,""));return r}function patchAtrules(t,e){const r={};for(const s in t){const n=e[s]&&e[s].descriptors||null;r[s]={prelude:s in e&&"prelude"in e[s]?e[s].prelude:t[s].prelude||null,descriptors:patchDictionary(t[s].descriptors||{},n||{})}}for(const s in e)hasOwnProperty.call(t,s)||(r[s]={prelude:e[s].prelude||null,descriptors:e[s].descriptors&&patchDictionary({},e[s].descriptors)});return r}export default{types:patchDictionary(mdnSyntaxes,patch.types),atrules:patchAtrules(preprocessAtrules(mdnAtrules),patch.atrules),properties:patchDictionary(mdnProperties,patch.properties)};