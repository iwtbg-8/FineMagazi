import{tokenize,Delim,WhiteSpace}from"../tokenizer/index.js";import{generateSourceMap}from"./sourceMap.js";import*as tokenBefore from"./token-before.js";const REVERSESOLIDUS=92;function processChildren(e,o){if("function"==typeof o){let t=null;return void e.children.forEach(e=>{null!==t&&o.call(this,t),this.node(e),t=e})}e.children.forEach(this.node,this)}function processChunk(e){tokenize(e,(o,t,n)=>{this.token(o,e.slice(t,n))})}export function createGenerator(e){const o=new Map;for(let t in e.node){const n=e.node[t];"function"==typeof(n.generate||n)&&o.set(t,n.generate||n)}return function(e,t){let n="",r=0,i={node(e){if(!o.has(e.type))throw new Error("Unknown node type: "+e.type);o.get(e.type).call(c,e)},tokenBefore:tokenBefore.safe,token(e,o){r=this.tokenBefore(r,e,o),this.emit(o,e,!1),e===Delim&&92===o.charCodeAt(0)&&this.emit("\n",WhiteSpace,!0)},emit(e){n+=e},result:()=>n};t&&("function"==typeof t.decorator&&(i=t.decorator(i)),t.sourceMap&&(i=generateSourceMap(i)),t.mode in tokenBefore&&(i.tokenBefore=tokenBefore[t.mode]));const c={node:e=>i.node(e),children:processChildren,token:(e,o)=>i.token(e,o),tokenize:processChunk};return i.node(e),i.result()}}