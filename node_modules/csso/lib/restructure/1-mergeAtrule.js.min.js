import{List,walk,keyword as resolveKeyword}from"css-tree";const{hasOwnProperty:hasOwnProperty}=Object.prototype;function addRuleToMap(e,r,t,l){const n=r.data,o=resolveKeyword(n.name).basename,a=n.name.toLowerCase()+"/"+(n.prelude?n.prelude.id:null);hasOwnProperty.call(e,o)||(e[o]=Object.create(null)),l&&delete e[o][a],hasOwnProperty.call(e[o],a)||(e[o][a]=new List),e[o][a].append(t.remove(r))}function relocateAtrules(e,r){const t=Object.create(null);let l=null;e.children.forEach(function(e,n,o){if("Atrule"===e.type){const a=resolveKeyword(e.name).basename;switch(a){case"keyframes":return void addRuleToMap(t,n,o,!0);case"media":if(r.forceMediaMerge)return void addRuleToMap(t,n,o,!1)}null===l&&"charset"!==a&&"import"!==a&&(l=n)}else null===l&&(l=n)});for(const r in t)for(const n in t[r])e.children.insertList(t[r][n],"media"===r?null:l)}function isMediaRule(e){return"Atrule"===e.type&&"media"===e.name}function processAtrule(e,r,t){if(!isMediaRule(e))return;const l=r.prev&&r.prev.data;l&&isMediaRule(l)&&e.prelude&&l.prelude&&e.prelude.id===l.prelude.id&&(l.block.children.appendList(e.block.children),t.remove(r))}export default function rejoinAtrule(e,r){relocateAtrules(e,r),walk(e,{visit:"Atrule",reverse:!0,enter:processAtrule})}