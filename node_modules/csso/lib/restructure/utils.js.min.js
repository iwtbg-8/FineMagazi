const{hasOwnProperty:hasOwnProperty}=Object.prototype;export function isEqualSelectors(e,t){let r=e.head,n=t.head;for(;null!==r&&null!==n&&r.data.id===n.data.id;)r=r.next,n=n.next;return null===r&&null===n}export function isEqualDeclarations(e,t){let r=e.head,n=t.head;for(;null!==r&&null!==n&&r.data.id===n.data.id;)r=r.next,n=n.next;return null===r&&null===n}export function compareDeclarations(e,t){const r={eq:[],ne1:[],ne2:[],ne2overrided:[]},n=Object.create(null),a=Object.create(null);for(let e=t.head;e;e=e.next)a[e.data.id]=!0;for(let t=e.head;t;t=t.next){const e=t.data;e.fingerprint&&(n[e.fingerprint]=e.important),a[e.id]?(a[e.id]=!1,r.eq.push(e)):r.ne1.push(e)}for(let e=t.head;e;e=e.next){const t=e.data;a[t.id]&&((!hasOwnProperty.call(n,t.fingerprint)||!n[t.fingerprint]&&t.important)&&r.ne2.push(t),r.ne2overrided.push(t))}return r}export function addSelectors(e,t){return t.forEach(t=>{const r=t.id;let n=e.head;for(;n;){const e=n.data.id;if(e===r)return;if(e>r)break;n=n.next}e.insert(e.createItem(t),n)}),e}export function hasSimilarSelectors(e,t){let r=e.head;for(;null!==r;){let e=t.head;for(;null!==e;){if(r.data.compareMarker===e.data.compareMarker)return!0;e=e.next}r=r.next}return!1}export function unsafeToSkipNode(e){switch(e.type){case"Rule":return hasSimilarSelectors(e.prelude.children,this);case"Atrule":if(e.block)return e.block.children.some(unsafeToSkipNode,this);break;case"Declaration":return!1}return!0}