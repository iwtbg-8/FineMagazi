import{version}from"./version.js";import*as syntax from"./syntax.js";import*as utils from"./utils.js";const{parse:parse,generate:generate,compress:compress}=syntax;function debugOutput(e,t,n,r){return t.debug&&console.error(`## ${e} done in %d ms\n`,Date.now()-n),r}function createDefaultLogger(e){let t;return function(n,r){let o=n;if(r&&(o=`[${((Date.now()-t)/1e3).toFixed(3)}s] ${o}`),e>1&&r){let t=generate(r);2===e&&t.length>256&&(t=t.substr(0,256)+"..."),o+=`\n  ${t}\n`}console.error(o),t=Date.now()}}function buildCompressOptions(e){return"function"!=typeof(e={...e}).logger&&e.debug&&(e.logger=createDefaultLogger(e.debug)),e}function runHandler(e,t,n){Array.isArray(n)||(n=[n]),n.forEach(n=>n(e,t))}function minify(e,t,n){const r=(n=n||{}).filename||"<unknown>";let o;const s=debugOutput("parsing",n,Date.now(),parse(t,{context:e,filename:r,positions:Boolean(n.sourceMap)}));n.beforeCompress&&debugOutput("beforeCompress",n,Date.now(),runHandler(s,n,n.beforeCompress));const u=debugOutput("compress",n,Date.now(),compress(s,buildCompressOptions(n)));return n.afterCompress&&debugOutput("afterCompress",n,Date.now(),runHandler(u,n,n.afterCompress)),o=n.sourceMap?debugOutput("generate(sourceMap: true)",n,Date.now(),(()=>{const e=generate(u.ast,{sourceMap:!0});return e.map._file=r,e.map.setSourceContent(r,t),e})()):debugOutput("generate",n,Date.now(),{css:generate(u.ast),map:null}),o}function minifyStylesheet(e,t){return minify("stylesheet",e,t)}function minifyBlock(e,t){return minify("declarationList",e,t)}export{version,utils,minifyStylesheet as minify,minifyBlock,syntax};