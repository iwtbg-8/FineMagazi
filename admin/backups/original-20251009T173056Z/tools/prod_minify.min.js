#!/usr/bin/env node
const fs=require("fs").promises,path=require("path"),terser=require("terser"),csso=require("csso");async function walk(e){let i=[];const s=await fs.readdir(e,{withFileTypes:!0});for(const n of s){const s=path.resolve(e,n.name);if(n.isDirectory()){if("node_modules"===n.name||".git"===n.name)continue;i=i.concat(await walk(s))}else i.push(s)}return i}function isMinified(e){return e.endsWith(".min.js")||e.endsWith(".min.css")}async function minifyJs(e){const i=await fs.readFile(e,"utf8"),s=await terser.minify(i,{compress:!0,mangle:!0});if(s.error)throw s.error;const n=e.replace(/\.js$/,".min.js");await fs.writeFile(n,s.code,"utf8"),console.log("JS ->",n)}async function minifyCss(e){const i=await fs.readFile(e,"utf8"),s=csso.minify(i).css,n=e.replace(/\.css$/,".min.css");await fs.writeFile(n,s,"utf8"),console.log("CSS ->",n)}async function main(){const e=path.resolve(__dirname,".."),i=await walk(e);let s=0;for(const e of i)if(!isMinified(e))if(e.endsWith(".js"))try{await minifyJs(e),s++}catch(i){console.error("JS failed",e,i)}else if(e.endsWith(".css"))try{await minifyCss(e),s++}catch(i){console.error("CSS failed",e,i)}console.log(`Done. Minified ${s} files.`)}main().catch(e=>{console.error(e),process.exit(1)});